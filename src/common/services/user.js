import { v4 as uuid } from 'uuid'

import { gitService, sshService } from './'
import { config } from '../utils'

export const get = () => {
  return config.read().users || []
}

const persist = (users) => {
  config.write({ users })
}

const updateExternalServices = (users) => {
  gitService.updateAuthorAndCoAuthors(users)
  sshService.rotateIdentityFile(users[0].rsaKeyPath, users[0].sshHost)
}

export const generateId = () => {
  let id
  do {
    id = uuid().split('-')[0]
  } while (id.match(/\d{8}/))

  return id
}

export const add = ({ name, email, rsaKeyPath }) => {
  const users = get()
  const activeUsers = users.filter((u) => u.active)
  const inactiveUsers = users.filter((u) => !u.active)

  const newUser = { id: generateId(), name, email, rsaKeyPath, active: true }

  const updatedUsers = [
    ...activeUsers,
    newUser,
    ...inactiveUsers
  ]

  persist(updatedUsers)
  updateExternalServices(updatedUsers)

  return updatedUsers
}

export const update = (user) => {
  const users = get()

  const foundIndex = users.findIndex((u) => u.id === user.id)
  if (foundIndex !== -1) {
    users[foundIndex] = user
  } else {
    users.push(user)
  }

  persist(users)
  updateExternalServices(users)

  return users
}

const getSelectedUsers = (users, terms) =>
  users.reduce((selectedUsers, user) => {
    if (terms.includes(user.id)) {
      return selectedUsers.concat(user)
    }

    const name = user.name.toLowerCase()
    const matchesName = terms.find((term) =>
      name.startsWith(term.trim().toLowerCase()))
    if (matchesName) {
      return selectedUsers.concat(user)
    }

    return selectedUsers
  }, [])

export const remove = (terms) => {
  const users = get()

  const usersToRemove = getSelectedUsers(users, terms)
  if (!usersToRemove.length) {
    return users
  }

  const updatedUsers = users.reduce((updatedUsers, user) => {
    if (usersToRemove.includes(user)) {
      return updatedUsers
    }

    return updatedUsers.concat(user)
  }, [])

  persist(updatedUsers)
  updateExternalServices(updatedUsers)

  return updatedUsers
}

export const rotate = () => {
  const users = get()

  const activeUsers = users.filter((u) => u.active)
  if (!activeUsers.length || activeUsers.length === 1) {
    return users
  }

  const inactiveUsers = users.filter((u) => !u.active)
  const updatedUsers = [
    ...activeUsers.slice(1),
    activeUsers[0],
    ...inactiveUsers
  ]

  persist(updatedUsers)
  updateExternalServices(updatedUsers)

  return updatedUsers
}

export const toggleActive = (terms) => {
  const users = get()

  const selectedUsers = getSelectedUsers(users, terms)
  if (!selectedUsers.length) {
    return users
  }

  const activeUsers = users.filter((u) => u.active && !selectedUsers.includes(u))
  const inactiveUsers = users.filter((u) => !u.active && !selectedUsers.includes(u))

  const updatedUsers = [
    ...activeUsers,
    ...selectedUsers.map((u) => ({ ...u, active: !u.active })),
    ...inactiveUsers
  ]

  persist(updatedUsers)
  updateExternalServices(updatedUsers)

  return updatedUsers
}

// TODO: Delete this after a reasonable amount of time has passed
// to ensure that ids generated by earlier versions of the app are
// shorter for more usability in the cli
export const shortenUserIds = () => {
  const users = get()

  const updatedUsers = users.map((u) =>
    u.id.length === 8
      ? u
      : { ...u, id: generateId() })

  persist(updatedUsers)
}
